
All for One: 

1. Single Inheritance:
   Create a Java program to model a simple vehicle hierarchy with a base class "Vehicle" and two derived classes "Car" and "Motorcycle."

2. Multilevel Inheritance:
   Develop a Java application for a school management system where you have a base class "Person," a derived class "Student," and another class "Teacher" derived from "Student."

3. Hierarchical Inheritance:
   Design a Java system for managing different types of bank accounts (Savings, Current) using hierarchical inheritance with a base class "Account" and two derived classes "SavingsAccount" and "CurrentAccount."

4. Aggregation:
   Implement a Java program to simulate a library system where you have classes for "Library," "Book," and "Member." Show the relationship between the library and its books using aggregation.

5. Single Inheritance:
   Create a Java program for a simple geometric shapes hierarchy with a base class "Shape" and two derived classes "Circle" and "Rectangle."

6. Multilevel Inheritance:
   Develop a Java application to represent employees in an organization. Create a base class "Employee," a derived class "Manager," and another class "Director" derived from "Manager."

7. Hierarchical Inheritance:
   Design a Java system for modeling different types of animals with a base class "Animal" and two derived classes "Mammal" and "Bird" to showcase hierarchical inheritance.

8. Aggregation:
   Implement a Java program for modeling a computer system with classes for "Computer," "CPU," and "Monitor." Use aggregation to represent the relationship between a computer and its components.

9. Single Inheritance:
   Create a Java program to model a musical instrument hierarchy with a base class "Instrument" and two derived classes "Guitar" and "Piano."

10. Multilevel Inheritance:
    Develop a Java application for a vehicle rental system, with a base class "Vehicle," a derived class "Car," and another class "LuxuryCar" derived from "Car" to demonstrate multilevel inheritance.


/*
Tasks:

--> Problem Statement 1: Sales Data Aggregation

Context:
You are working for a retail company that has multiple stores. Each store records its sales data, which includes the sales amount and the date of the sale. Your task is to write a Java program that aggregates the sales data to provide insights such as total sales, average sales per day, and total sales for each store.

Requirements:
1. Create a `Store` class that contains a list of `Sale` objects. Each `Sale` object should have attributes such as `date` (of type `LocalDate`) and `amount` (of type `double`).
2. Write methods in the `Store` class to:
   - Calculate the total sales for the store.
   - Calculate the average sales per day for the store.
   - Group sales data by month and calculate the total sales for each month.
3. Write a `RetailCompany` class that contains a list of `Store` objects.
4. Write methods in the `RetailCompany` class to:
   - Calculate the total sales for the company.
   - Calculate the average sales per store.
   - Find the store with the highest total sales.

Example Usage:

Store store1 = new Store();
store1.addSale(new Sale(LocalDate.of(2023, 1, 1), 100.0));
store1.addSale(new Sale(LocalDate.of(2023, 1, 2), 150.0));

Store store2 = new Store();
store2.addSale(new Sale(LocalDate.of(2023, 1, 1), 200.0));
store2.addSale(new Sale(LocalDate.of(2023, 1, 2), 250.0));

RetailCompany company = new RetailCompany();
company.addStore(store1);
company.addStore(store2);

System.out.println("Total sales for the company: " + company.getTotalSales());
System.out.println("Average sales per store: " + company.getAverageSalesPerStore());
System.out.println("Store with the highest sales: " + company.getTopStore().getTotalSales());


--> Problem Statement 2: Student Grades Aggregation

Context:
You are developing a system for a school to manage students' grades. Each student can be enrolled in multiple courses, and each course has multiple grades recorded for the student. Your task is to write a Java program that aggregates the grades data to provide insights such as total grades, average grade, and highest grade for each student.

Requirements:
1. Create a `Course` class that contains a list of `Grade` objects. Each `Grade` object should have attributes such as `date` (of type `LocalDate`) and `score` (of type `double`).
2. Write methods in the `Course` class to:
   - Calculate the total grades for the course.
   - Calculate the average grade for the course.
   - Find the highest grade for the course.
3. Create a `Student` class that contains a list of `Course` objects.
4. Write methods in the `Student` class to:
   - Calculate the total grades for the student across all courses.
   - Calculate the average grade for the student across all courses.
   - Find the course with the highest average grade.

Example Usage:

Course math = new Course();
math.addGrade(new Grade(LocalDate.of(2023, 1, 1), 90.0));
math.addGrade(new Grade(LocalDate.of(2023, 1, 2), 85.0));

Course science = new Course();
science.addGrade(new Grade(LocalDate.of(2023, 1, 1), 95.0));
science.addGrade(new Grade(LocalDate.of(2023, 1, 2), 80.0));

Student student = new Student();
student.addCourse(math);
student.addCourse(science);

System.out.println("Total grades for the student: " + student.getTotalGrades());
System.out.println("Average grade for the student: " + student.getAverageGrade());
System.out.println("Course with the highest average grade: " + student.getTopCourse().getAverageGrade());



*/